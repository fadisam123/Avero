@model RegisterViewModel
@{
    Layout = "~/Views/Shared/_LayoutAccount.cshtml";
    ViewBag.Title = "Register";
}
@section style {

    <link rel="stylesheet" href="~/css/Account/Register.css" />
    <style>
        .required:after {
            content: " *";
            color: red;
        }
    </style>
}





    <div class="px-2">
        <form id="reg" method="post" asp-controller="Account" asp-action="Register" enctype="multipart/form-data">

            <!-- Modal validation popup -->
            <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                            <button onclick="$('#myModal').modal('hide')" type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div id="validation-summary" asp-validation-summary="All" class="text-danger"></div>
                        </div>
                        <div class="modal-footer">
                            <button onclick="$('#myModal').modal('hide')" type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="required" asp-for="Email"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="required" asp-for="Password"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="required" asp-for="ConfirmPassword"></label>
                <input asp-for="ConfirmPassword" class="form-control" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="required" asp-for="name"></label>
                <input asp-for="name" class="form-control" />
                <span asp-validation-for="name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="street_name"></label>
                <input asp-for="street_name" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="Phone"></label>
                <input asp-for="Phone" />
            </div>
            <div class="form-group">
                <label>City</label>
                <select id="cityes" asp-items="@(new SelectList(ViewBag.cityes,"Id","name"))"><option value="">Select City</option></select>
            </div>
            <div class="form-group">
                <label class="required" asp-for="neighborhood"></label>
                <select id="neighborhood" asp-for="neighborhood"><option value="">Select City First</option></select>
                <span asp-validation-for="neighborhood" class="text-danger"></span>
            </div>

            <div class="form-check">
                <label asp-for="is_wholesealer"></label>
                <input type="checkbox" asp-for="is_wholesealer" />
            </div>



            <div class="form-group d-flex align-items-center">
                <div class="me-4"><img src="~/img/users/Default.jpg" class="rounded" id="photoOutput" width="200" /></div>
                <div class="flex-fill">
                    <div class="custom-file">
                        <input accept="image/png, image/jpeg" id="photo" asp-for="Photo" class="form-control custom-file-input">
                    </div>
                </div>
            </div>


            <div id="myMap" style="width:75%;height:400px; margin: auto"></div>


            <input id="latInput" asp-for="latitude" hidden value="0" />
            <input id="longInput" asp-for="longitude" hidden value="0" />
            <input id="marker_map_address" asp-for="marker_map_address" hidden value="" />

            <button onclick="if(!$('#reg').valid())$('#myModal').modal('show')" type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>

    @section script {

    <script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=Ak2ass0c0kTsKeJjvphla8s95xKqXgpxzb8erLHJaUMOjvDunbG1qBf_fHbOG1VS' async defer></script>

    <script>

        var map, searchManager, mapEvents;
        function GetMap() {
            mapEvents = Microsoft.Maps.Events
            map = new Microsoft.Maps.Map('#myMap', {
                center: new Microsoft.Maps.Location(35, 38),
                zoom: 6,
                showLocateMeButton: true,
                showBreadcrumb: true,
                showMapTypeSelector: false,
                showZoomButtons: false,

            });
            var center = map.getCenter();
            var pin = new Microsoft.Maps.Pushpin(center, {
                title: '',
                text: '1',
                draggable: true,
                color: 'red',
                icon: '/img/marker.png',
            });
            mapEvents.addHandler(pin, 'mouseover', function(e) {
                e.target.setOptions({ title: 'Your location' });
            });
            mapEvents.addHandler(pin, 'mouseout', function(e) {
                e.target.setOptions({ title: '' });
            });
            mapEvents.addHandler(pin, 'dragend', function(e) {
                $('#latInput').val(e.location.latitude);
                $('#longInput').val(e.location.longitude);
                // this call to update marker_map_address input
                reverseGeocode({ latitude: e.location.latitude, longitude: e.location.longitude, });
            });
            mapEvents.addHandler(map, 'click', function(e) {
                if (!e.target.entities.get(0))
                    e.target.entities.push(pin);
                pin.setLocation({ latitude: e.location.latitude, longitude: e.location.longitude, })
                $('#latInput').val(e.location.latitude);
                $('#longInput').val(e.location.longitude);
                // this call to update marker_map_address input
                reverseGeocode({ latitude: e.location.latitude, longitude: e.location.longitude, });
            });
            mapEvents.addHandler(map, 'rightclick', function(e) {
                e.target.entities.remove(pin);
                $('#latInput').val(0);
                $('#longInput').val(0);
                $('#marker_map_address').val('');
            });
        }

        function geocodeQuery(query) {
            //If search manager is not defined, load the search module.
            if (!searchManager) {
                //Create an instance of the search manager and call the geocodeQuery function again.
                Microsoft.Maps.loadModule('Microsoft.Maps.Search', function() {
                    searchManager = new Microsoft.Maps.Search.SearchManager(map);
                    geocodeQuery(query);
                });
            } else {
                var searchRequest = {
                    where: query,
                    callback: function(r) {
                        //Add the first result to the map and zoom into it.
                        if (r && r.results && r.results.length > 0)
                            map.setView({ bounds: r.results[0].bestView });
                    },
                    errorCallback: function(e) {
                        //If there is an error, alert the user about it.
                        alert("No results found.");
                    }
                };

                //Make the geocode request.
                searchManager.geocode(searchRequest);
            }
        }

        function reverseGeocode(location) {
            //If search manager is not defined, load the search module.
            if (!searchManager) {
                //Create an instance of the search manager and call the reverseGeocode function again.
                Microsoft.Maps.loadModule('Microsoft.Maps.Search', function() {
                    searchManager = new Microsoft.Maps.Search.SearchManager(map);
                    reverseGeocode();
                });
            } else {
                var searchRequest = {
                    location: location,
                    callback: function(r) {
                        //Tell the user the name of the result.
                        $('#marker_map_address').val(r.name);
                    },
                    errorCallback: function(e) {

                    }
                };

                //Make the reverse geocode request.
                searchManager.reverseGeocode(searchRequest);
            }
        }


        // display name of photo in upload field
        $('.custom-file-input').on("change", function() {
            var fileName = $(this).val().split("\\").pop();
            $(this).next('.custom-file-label').html(fileName);
        });

        // preview the photo when selected
        $('#photo').on('change', function() {
            $('#photoOutput')[0].src = URL.createObjectURL(event.target.files[0]);
        })


        // changing dropdown list of neighborhoods when (city dropdown list) is changed
        $('#cityes').on('change', function() {
            let city_id;
            if (!this.value) {
                city_id = 0;
                $('#neighborhood').empty();
                $('#neighborhood').append('<option value="">Select City First</option>');
                return;
            }
            else {
                city_id = this.value;
                $.ajax({
                    type: 'GET',
                    url: '/Account/getNeighborhood/' + city_id,
                    success: function(result) {
                        let p = $('#neighborhood').parent();
                        $('#neighborhood').empty();
                        if (result.length != 0)
                            for (let i = 0; i < result.length; i++) {
                                $('#neighborhood').append('<option value="' + result[i].id + '">' + result[i].name + '</option>');
                            }
                        // update map location with selected city
                        geocodeQuery($('#neighborhood').find(":selected").text() + ', ' + $('#cityes').find(":selected").text() + ', Syria');

                    },
                    error: function() {
                        alert('Failed to receive the Data');
                    }
                })
            }
        });

        // update map location with selected neighborhood
        $('#neighborhood').on('change', function() {
            geocodeQuery($('#neighborhood').find(":selected").text() + ', ' + $('#cityes').find(":selected").text() + ', Syria');
        });
















    </script>

    }